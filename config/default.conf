upstream hello_phoenix {
    server 127.0.0.1:8888;
}
# The following map statement is required
# if you plan to support channels. See https://www.nginx.com/blog/websocket-nginx/
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    server_name simolin.io www.simolin.io;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name simolin.io www.simolin.io;
    ssl_certificate /etc/letsencrypt/live/simolin.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/simolin.io/privkey.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers On;
    ssl_trusted_certificate /etc/letsencrypt/live/simolin.io/chain.pem;
    ssl_session_cache shared:SSL:128m;
    add_header Strict-Transport-Security "max-age=31557600; includeSubDomains";
    ssl_stapling on;
    ssl_stapling_verify on;
    # Your favorite resolver may be used instead of the Google one below
    resolver 8.8.8.8;

    location / {
        try_files $uri @proxy;
    }
    # Needs to be set for let's encrypt to work
    location '/.well-known/acme-challenge' {
	   default_type 'text/plain';
	    root /var/www/turo/;
    }

    location @proxy {
        include proxy_params;
        proxy_redirect off;
        proxy_pass http://hello_phoenix;
        # The following two headers need to be set in order
        # to keep the websocket connection open. Otherwise you'll see
        # HTTP 400's being returned from websocket connections.
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
